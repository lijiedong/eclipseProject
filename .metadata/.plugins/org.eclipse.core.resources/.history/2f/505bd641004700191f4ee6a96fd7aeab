package stringToInteger;

import org.junit.Test;

public class StringToInteger {
	@Test
	public void test() {
		System.out.println(myAtoi("+-"));
	}

	public int myAtoi(String str) {
		str = str.trim();
		if (str.length() == 0) {
			return 0;
		} else {
			// 判断去除首尾空格后的字符串的第一个字符是什么
			
			if (str.charAt(0) != '+' && str.charAt(0) != '-' && (str.charAt(0) < 48 || str.charAt(0) > 57)) {
				return 0;
			} else {
				int len = 0;
				// 遍历字符串str.charAt(len) >= 48 && str.charAt(len) <= 57
				// 先找到第一个负号或者数字字符
				while (len < str.length() && (str.charAt(len) < 48 || str.charAt(len) > 57)) {
					len++;
				}
				// 找到第一个数字字符后，判断它的前面那个字符是不是负号字符,前提是len不是在字符串的最首位
				long temp = 0;
				int flag = 1;// 用来表示要转换的数是负数还是正数
				if (len != 0) {
					if (str.charAt(len - 1) == '-') {
						flag = -1;
					}
				}

				// 开始转换数字
				// temp =
				// Integer.parseInt(Character.toString(str.charAt(len++)));
				while (len < str.length() && (str.charAt(len) >= 48 && str.charAt(len) <= 57)) {
					temp = temp * 10 + Integer.parseInt(Character.toString(str.charAt(len++)));
				}

				// 判断转换后的数据是否越界
				if (flag == 1) {
					if (temp > 2147483647) {
						return 2147483647;
					} else {
						return (int) temp;
					}
				} else {
					temp = temp * flag;
					if (temp < -2147483648) {
						return -2147483648;
					} else {
						return (int) temp;
					}
				}

			}
		}

		/*
		 * while (() && len < str.length()) { len++; } // 当找到第一个数字字符的时候 //
		 * 判断前面一个字符是不是负号 int temp = len - 1; if (str.charAt(temp) == '-') { temp
		 * = -1; } else { temp = 1; } long l =
		 * Integer.parseInt(Character.toString(str.charAt(0)));
		 */
	}
}
